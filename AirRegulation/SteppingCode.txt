# Setting up the code to run the Air Regulator for the HALT/HASS table.
# Info on the regulator:
# configure the serial connections (the parameters differs on the device you are connecting to)

import serial
import minimalmodbus

# Really not sure on this.  Connor do you know what should go here? (lines after ser =)

ser = serial.Serial(
	port='/dev/ttyUSB1', # Will need to define.
	baudrate=19200,
	parity=serial.PARITY_EVEN,
	stopbits=serial.STOPBITS_TWO, # not sure what this is
	bytesize=serial.SEVENBITS # not sure on this either
)

#Defining the QB3 Regulator (Is there a name on the device that I need to call it instead of instrument?)
instrument = minimalmodbus.Instrument('COMX', 247) # port name(Need to define), slave address (in decimal)

# Skeleton of what the loops should look like:
    For x-amount of time(First Step) { 
        Read Vrms value ;
        Read pressure % value ;

## Read pressure (PV = ProcessValue) ##
pressure = instrument.read_register(40050, 1) # Registernumber, number of decimals (how many decimals?)
print pressure

        While Apoint < Vrms <Bpoint { # Not sure how we want to set this up
            If Vrms > upper bound(+2grms) {
                SetRegister to step down 1% ;
## Change pressure setpoint (SP) (Stepping the pressure ##
NEW_PRESSURE = 
instrument.write_register(40050, NEW_PRESSURE, 1) # Registernumber, value, number of decimals for storage
                }
             If Vrms < lower bound(-2grms) {
                    SetRegister to step up 1%;
## Change pressure setpoint (SP) (Stepping the pressure ##
NEW_PRESSURE = 
instrument.write_register(40050, NEW_PRESSURE, 1) # Registernumber, value, number of decimals for storage
                    }
         For time > first step, break.

For x-amount of time(Second Step) { 
        Read Vrms value ;
        Read pressure % value ; 

## Read pressure (PV = ProcessValue) ##
pressure = instrument.read_register(40050, 1) # Registernumber, number of decimals (how many decimals?)
print pressure

        While Apoint < Vrms <Bpoint { # Not sure how we want to set this up
            If Vrms > upper bound(+2grms) {
                SetRegister to step down 1% ;
## Change pressure setpoint (SP) (Stepping the pressure ##
NEW_PRESSURE = 
instrument.write_register(40050, NEW_PRESSURE, 1) # Registernumber, value, number of decimals for storage

                }
             If Vrms < lower bound(-2grms) {
                    SetRegister to step up 1%;
## Change pressure setpoint (SP) (Stepping the pressure ##
NEW_PRESSURE = 
instrument.write_register(40050, NEW_PRESSURE, 1) # Registernumber, value, number of decimals for storage
                    }
         For time > second step, break.

For x-amount of time(Third Step) { 
        Read Vrms value ;
        Read pressure % value ; 

## Read pressure (PV = ProcessValue) ##
pressure = instrument.read_register(40050, 1) # Registernumber, number of decimals (how many decimals?)
print pressure

        While Apoint < Vrms <Bpoint { # Not sure how we want to set this up
            If Vrms > upper bound(+2grms) {
                SetRegister to step down 1% ;
## Change pressure setpoint (SP) (Stepping the pressure ##
NEW_PRESSURE = 
instrument.write_register(40050, NEW_PRESSURE, 1) # Registernumber, value, number of decimals for storage
                }
             If Vrms < lower bound(-2grms) {
                SetRegister to step up 1%;
## Change pressure setpoint (SP) (Stepping the pressure ##
NEW_PRESSURE = 
instrument.write_register(40050, NEW_PRESSURE, 1) # Registernumber, value, number of decimals for storage
                    }
         For time > third step, break.            

For x-amount of time(Fourth Step) { 
        Read Vrms value ;
        Read pressure % value ; 

## Read pressure (PV = ProcessValue) ##
pressure = instrument.read_register(40050, 1) # Registernumber, number of decimals (how many decimals?)
print pressure

        While Apoint < Vrms <Bpoint { # Not sure how we want to set this up
            If Vrms > upper bound(+2grms) {
                SetRegister to step down 1% ;
## Change pressure setpoint (SP) (Stepping the pressure ##
NEW_PRESSURE = 
instrument.write_register(40050, NEW_PRESSURE, 1) # Registernumber, value, number of decimals for storage
                }
             If Vrms < lower bound(-2grms) {
                    SetRegister to step up 1%;
## Change pressure setpoint (SP) (Stepping the pressure ##
NEW_PRESSURE = 
instrument.write_register(40050, NEW_PRESSURE, 1) # Registernumber, value, number of decimals for storage
                    }
         For time > fourth step, break.

For x-amount of time(Fifth Step) { 
        Read Vrms value ;
        Read pressure % value ;

## Read pressure (PV = ProcessValue) ##
pressure = instrument.read_register(40050, 1) # Registernumber, number of decimals (how many decimals?)
print pressure
 
        While Apoint < Vrms <Bpoint { # Not sure how we want to set this up
            If Vrms > upper bound(+2grms) {
                SetRegister to step down 1% ;
## Change pressure setpoint (SP) (Stepping the pressure ##
NEW_PRESSURE = 
instrument.write_register(40050, NEW_PRESSURE, 1) # Registernumber, value, number of decimals for storage
                }
             If Vrms < lower bound(-2grms) {
                    SetRegister to step up 1%;
## Change pressure setpoint (SP) (Stepping the pressure ##
NEW_PRESSURE = 
instrument.write_register(40050, NEW_PRESSURE, 1) # Registernumber, value, number of decimals for storage
                    }
         For time > fifth step, break.
For time > last step {
          
instrument.write_register(40050, 0, 1) # Registernumber, value, number of decimals for storage
#Sets pressure to 0, kills gun.
}




#Still need to define values for where we set the pressure.  Do I keep calling that variable new pressure, or call it pressure so that whaen we read out we still read out "pressure"?




